package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"mafia/stats/graph/model"
	"strconv"
)

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Game, error) {
	realId, err := strconv.ParseUint(input.ID, 10, 64)
	if err != nil {
		return nil, err
	}
	r.Storage.AddComment(realId, input.Text)
	game, err := r.Storage.GetGame(realId)
	if err != nil {
		return nil, err
	}
	return model.ConvertGameInfo(&game), nil
}

// Games is the resolver for the games field.
func (r *queryResolver) Games(ctx context.Context) ([]string, error) {
	return r.Storage.GetGameIds(), nil
}

// GameStats is the resolver for the gameStats field.
func (r *queryResolver) GameStats(ctx context.Context, id string) (*model.Game, error) {
	realId, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	game, err := r.Storage.GetGame(realId)
	if err != nil {
		return nil, err
	}
	return model.ConvertGameInfo(&game), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
